rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Función para verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Función para verificar si el usuario es administrador
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Función para verificar si el usuario es trabajador
    function isWorker() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'worker';
    }
    
    // Función para verificar si el usuario es el propietario del documento
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Función para verificar si existe un administrador
    function adminExists() {
      return exists(/databases/$(database)/documents/users) &&
        getAfter(/databases/$(database)/documents/users).where('role', '==', 'admin').limit(1).size() > 0;
    }

    // Reglas para la colección de usuarios
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if 
        // Usuario normal puede registrarse
        (!isAuthenticated() && request.resource.data.role == 'user') ||
        // Admin puede crear workers y admins
        (isAdmin() && (request.resource.data.role == 'worker' || request.resource.data.role == 'admin')) ||
        // Primer admin puede registrarse
        (!isAuthenticated() && request.resource.data.role == 'admin' && !adminExists());
      allow update: if isAdmin() || isOwner(userId);
      allow delete: if isAdmin();
    }

    // Reglas para la colección de servicios
    match /services/{serviceId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAdmin() || isWorker();
      allow delete: if isAdmin();
    }

    // Reglas para la colección de grúas
    match /cranes/{craneId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Reglas para la colección de trabajadores
    match /workers/{workerId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
} 